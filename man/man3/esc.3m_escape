." Text automatically generated by txt2man
.TH "esc" "3m_escape" "September 12, 2020" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBesc(3f) \fP- [M_escape] substitute escape sequences for XML-like syntax (prototype) in strings
\fB
.SH SYNOPSIS
.nf
.fam C
function \fBesc\fP(\fIstring\fP) result (\fIexpanded\fP)
.PP
.nf
.fam C
      character(len=*),intent(in) :: string
      character(len=:),allocatable :: expanded

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
This is a prototype exploring using XML-like syntax to add attributes
to terminal output such as color.
ANSI escape sequences
ANSI escape sequences are not universally supported by all terminal
emulators; and normally should be suppressed when not going to a tty
device. This routine provides the basic structure to support such
behaviors. or to perhaps generate a CSS style sheet and HTML instead
of text, \.\.\.
.PP
The original concept was to allow formatting by using an existing
XML library to allow the user to write HTML and to format it on
a terminal like w3m, lynx, and link do and in some ways this is an
opposite approach in that it is directly formatting the text by using
a similar syntax to directly generate text attributes; but it is a
much simpler approach programmatically.
.PP
Typically, you would use M_system::system_istty to set the default
to "plain" instead of "vt102" when the output file is not a terminal.
.RE
.PP

.nf
.fam C
      ANSI  HTML        Markdown
            <h1></h1>   #
            <h2></h2>   ##
            <b></b>     ** and **
            <i></i>     __ and __

.fam T
.fi
.RS
Apparently have to make a stack of colors to allow nesting colors
.PP
How common are extensions like xterm-256 has to set RGB values for
colors and so on?
.SH OPTIONS
.TP
.B \fIstring\fP
input \fIstring\fP  of form
.PP
.nf
.fam C
               "<attribute_name>string</attribute_name> \.\.\.".
.fam T
.fi
where the current attributes are color names, color=name,
color=#rgb, bold, italic, \.\.\.
.SH KEYWORDS
current keywords
.PP
.nf
.fam C
      r,red
      g,green
      b,blue
      m,magenta
      c,cyan
      y,yellow
      e,ebony
      w,white
      it,italic
      bo,bold
      un,underline
      clear
      esc,esc

.fam T
.fi
you can add, delete, and replace what strings are produced using \fBUPDATE\fP(3f).
.SH LIMITATIONS
.IP \(bu 3
colors are not nestable, keywords are case-sensitive,
.IP \(bu 3
not all terminals obey the sequences. On Windows, it is best if
you use Windows 10+ and/or the Linux mode; although it has worked
with all CygWin and MinGW and Putty windows and mintty.
.SH MANNERS
The current manners or modes supported via the \fBESC_MODE\fP(3f) procedure are
.PP
.nf
.fam C
       plain          suppress the output associated with keywords
       ansi(default)  commonly supported escape sequences
       raw            echo the input to ESC(3f) as its output

.fam T
.fi
.SH EXAMPLE
Sample program
.PP
.nf
.fam C
   program demo_M_escape
   use M_escape, only : esc, esc_mode, update
      write(*,'(a)') esc('<clear>TEST DEFAULTS:')
      call printstuff()

      write(*,'(a)') esc('TEST MANNER=PLAIN:')
      call esc_mode(manner='plain')
      call printstuff()

      write(*,'(a)') esc('TEST MANNER=RAW:')
      call esc_mode(manner='raw')
      call printstuff()

      write(*,'(a)') esc('TEST MANNER=VT102:')
      call esc_mode(manner='vt102')
      call printstuff()

      write(*,'(a)') esc('TEST ADDING A CUSTOM SEQUENCE:')
      call update('blink',char(27)//'[5m')
      call update('/blink',char(27)//'[38m')
      write(*,'(a)') esc('<blink>Items for Friday<blink/>')

   contains
   subroutine printstuff()

.nf
.fam C
      write(*,'(a)') esc('<r>RED</r>,<g>GREEN</g>,<b>BLUE</b>')
      write(*,'(a)') esc('<c>CYAN</c>,<m>MAGENTA</g>,<y>YELLOW</y>')
      write(*,'(a)') esc('<w>WHITE</w> and <e>EBONY</e>')

      write(*,'(a)') esc('Adding <bo>bold</bo>')
      write(*,'(a)') esc('<bo><r>RED</r>,<g>GREEN</g>,<b>BLUE</b></bo>')
      write(*,'(a)') esc('<bo><c>CYAN</c>,<m>MAGENTA</g>,<y>YELLOW</y></bo>')
      write(*,'(a)') esc('<bo><w>WHITE</w> and <e>EBONY</e></bo>')

      write(*,'(a)') esc('Adding <ul>underline</ul>')
      write(*,'(a)') esc('<bo><ul><r>RED</r>,<g>GREEN</g>,<b>BLUE</b></ul></bo>')
      write(*,'(a)') esc('<bo><ul><c>CYAN</c>,<m>MAGENTA</g>,<y>YELLOW</y></ul></bo>')
      write(*,'(a)') esc('<bo><ul><w>WHITE</w> and <e>EBONY</e></ul></bo>')

      write(*,'(a)') esc('Adding <ul>italic</ul>')
      write(*,'(a)') esc('<bo><ul><it><r>RED</r>,<g>GREEN</g>,<b>BLUE</b></it></ul></bo>')
      write(*,'(a)') esc('<bo><ul><it><c>CYAN</c>,<m>MAGENTA</g>,<y>YELLOW</it></y></ul></bo>')
      write(*,'(a)') esc('<bo><ul><it><w>WHITE</w> and <e>EBONY</e></ul></bo>')

      write(*,'(a)') esc('Adding <in>inverse</in>')
      write(*,'(a)') esc('<in><bo><ul><it><r>RED</r>,<g>GREEN</g>,<b>BLUE</b></it></ul></bo></in>')
      write(*,'(a)') esc('<in><bo><ul><it><c>CYAN</c>,<m>MAGENTA</g>,<y>YELLOW</it></y></ul></bo></in>')
      write(*,'(a)') esc('<in><bo><ul><it><w>WHITE</w> and <e>EBONY</e></ul></bo></in>')
.fam T
.fi
end subroutine printstuff
.RS
.PP
end program demo_M_escape
